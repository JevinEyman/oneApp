"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var MarkdownUtil_1 = require("../util/MarkdownUtil");
var components_1 = require("../components");
exports.codeCommand = {
    buttonContent: React.createElement(components_1.MdeToolbarIcon, { icon: "code" }),
    buttonProps: { "aria-label": "Insert code" },
    execute: function (getMarkdownState, setMarkdownState) {
        var _a = getMarkdownState(), text = _a.text, selection = _a.selection;
        selection = MarkdownUtil_1.selectWordIfCaretIsInsideOne({ text: text, selection: selection });
        if (text.slice(selection.start, selection.end).indexOf("\n") === -1) {
            // when there's no breaking line
            setMarkdownState(MarkdownUtil_1.insertBeforeAndAfter({ text: text, selection: selection }, "`"));
            return;
        }
        var textInsertion;
        // insert breaks before, if needed
        textInsertion = MarkdownUtil_1.insertBreaksBeforeSoThatThereIsAnEmptyLineBefore({ text: text, selection: selection });
        text = textInsertion.newText;
        selection = textInsertion.newSelection;
        // inserts ```\n before
        textInsertion = MarkdownUtil_1.insertBefore(text, "```\n", selection, false);
        text = textInsertion.newText;
        selection = textInsertion.newSelection;
        // inserts ```\n after
        textInsertion = MarkdownUtil_1.insertAfter(text, "\n```", selection);
        text = textInsertion.newText;
        selection = textInsertion.newSelection;
        // insert breaks after, if needed
        textInsertion = MarkdownUtil_1.insertBreaksAfterSoThatThereIsAnEmptyLineAfter({ text: text, selection: selection });
        text = textInsertion.newText;
        selection = textInsertion.newSelection;
        setMarkdownState({ text: text, selection: selection });
    },
};
