{
  "_args": [
    [
      {
        "raw": "react-mde",
        "scope": null,
        "escapedName": "react-mde",
        "name": "react-mde",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/christopherfennessey/Documents/School/oneApp"
    ]
  ],
  "_from": "react-mde@latest",
  "_id": "react-mde@5.1.1",
  "_inCache": true,
  "_location": "/react-mde",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-mde_5.1.1_1523307242818_0.6718183786404026"
  },
  "_npmUser": {
    "name": "andrerpena",
    "email": "andrerpena@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-mde",
    "scope": null,
    "escapedName": "react-mde",
    "name": "react-mde",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-mde/-/react-mde-5.1.1.tgz",
  "_shasum": "b5d60dfeb562b16b77de4dbc93ba03914ddcd84b",
  "_shrinkwrap": null,
  "_spec": "react-mde",
  "_where": "/Users/christopherfennessey/Documents/School/oneApp",
  "author": {
    "name": "Andre Pena"
  },
  "bugs": {
    "url": "https://github.com/andrerpena/react-mde.git/issues"
  },
  "dependencies": {},
  "description": "React Markdown Editor",
  "devDependencies": {
    "@types/draft-js": "^0.10.20",
    "@types/express": "^4.11.1",
    "@types/mocha": "^2.2.48",
    "@types/react": "^16.0.38",
    "@types/react-dom": "^16.0.4",
    "@types/showdown": "^1.7.2",
    "@types/webpack-dev-middleware": "^2.0.0",
    "@types/webpack-hot-middleware": "^2.16.2",
    "awesome-typescript-loader": "^3.4.1",
    "chai": "^4.1.2",
    "cross-env": "^5.1.3",
    "css-loader": "^0.28.10",
    "draft-js": "^0.10.5",
    "express": "^4.16.2",
    "extract-text-webpack-plugin": "^3.0.2",
    "file-loader": "^1.1.9",
    "gulp": "^3.9.1",
    "gulp-cli": "^2.0.1",
    "gulp-rename": "^1.2.2",
    "gulp-sass": "^3.1.0",
    "gulp-typescript": "^4.0.1",
    "merge2": "^1.2.1",
    "mocha": "^5.0.1",
    "node-sass": "^4.7.2",
    "normalize.css": "^8.0.0",
    "opn": "^5.2.0",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "react-hot-loader": "^3.1.3",
    "sass-loader": "^6.0.6",
    "showdown": "^1.8.6",
    "style-loader": "^0.20.2",
    "ts-node": "^5.0.0",
    "tslint": "^5.9.1",
    "tslint-react": "^3.5.1",
    "typescript": "^2.7.2",
    "webpack": "^3.11.0",
    "webpack-dev-middleware": "^2.0.6",
    "webpack-hot-middleware": "^2.21.0",
    "webpack-stream": "^4.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xewbjitlre1NkbmPzUe8lrmqu97/KYvCwim4iH7bcdu8Zx8oBcjqhNVC9tbgCKrzjanfi7mEYscYqFlneI9Mjg==",
    "shasum": "b5d60dfeb562b16b77de4dbc93ba03914ddcd84b",
    "tarball": "https://registry.npmjs.org/react-mde/-/react-mde-5.1.1.tgz",
    "fileCount": 89,
    "unpackedSize": 114939
  },
  "gitHead": "98e8771407e421f24643d996b5abaa0aa7fadad1",
  "homepage": "https://github.com/andrerpena/react-mde.git#readme",
  "keywords": [
    "boilerplate",
    "react",
    "component"
  ],
  "license": "MIT",
  "main": "./lib/js/index.js",
  "maintainers": [
    {
      "name": "andrerpena",
      "email": "andrerpena@gmail.com"
    }
  ],
  "name": "react-mde",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "draft-js": "^0.10.5"
  },
  "readme": "# react-mde\n\nA simple yet powerful and extensible Markdown Editor editor for React. React-mde is built on top of [Draft.js](https://draftjs.org/).\n\n## Demos\n\n- [Demo](http://andrerpena.me/react-mde/).\n- [CodeSandbox Demo](https://codesandbox.io/s/o5vpjwyp79). Fork it and have fun =).\n\n## Installing\n\n    npm i --save react-mde\n\n## Dependencies\n\nReact-mde currently depends on:\n\n- [Draft.js](https://draftjs.org/). This facilitates features that would otherwise be quite\ndifficult. The best examples being history management, mentions and pasting files.\n<!-- -->\n\n    npm i --save draft-js\n\n- [Font Awesome 5.*](https://fontawesome.com/) for the icons. This is not a hard dependency and there are plans to eliminate it altogether, but for now,\nthe button classes are meant to be resolved by Font Awesome, which can be installed [using your preferred method](https://fontawesome.com/how-to-use/svg-with-js).\nThe easiest is just add this to `<head/>`:\n<!-- -->\n\n    <script defer src=\"https://use.fontawesome.com/releases/v5.0.6/js/all.js\"></script>\n \n## Optional dependencies\n\n- [Showdown](https://github.com/showdownjs/showdown). React-mde is not opinionated as to how to transform markdown into HTML and this can be done both in client-side,\nlike StackOverflow, or in server-side, like GitHub. The easiest way is to use Showdown and process it in client-side. If you\ndecide to do so, install Showdown:\n<!-- -->\n\n    npm i --save showdown\n\n## Using\n\nReact-mde is a completely controlled component.\n    \n    Minimal example using Showdown:\n    \n    import * as React from \"react\";\n    import ReactMde, {ReactMdeTypes} from \"../src\";\n    import * as Showdown from \"showdown\";\n    \n    export interface AppState {\n        mdeState: ReactMdeTypes.MdeState;\n    }\n    \n    export class App extends React.Component<{}, AppState> {\n    \n        converter: Showdown.Converter;\n    \n        constructor(props) {\n            super(props);\n            this.state = {\n                mdeState: null,\n            };\n            this.converter = new Showdown.Converter({tables: true, simplifiedAutoLink: true});\n        }\n    \n        handleValueChange = (mdeState: ReactMdeTypes.MdeState) => {\n            this.setState({mdeState});\n        }\n    \n        render() {\n            return (\n                <div className=\"container\">\n                    <ReactMde\n                        onChange={this.handleValueChange}\n                        editorState={this.state.mdeState}\n                        generateMarkdownPreview={(markdown) => Promise.resolve(this.converter.makeHtml(markdown))}\n                    />\n                </div>\n            );\n        }\n    }\n\n\n## React-mde Props\n\nThe types are described below\n\n- **editorState: MdeState**: The state of the editor. This contains the markdown, the HTML and the underlying Draft.js state.\n- **className?: string**: Optional class name to be added to the top level element.\n- **commands?: Command[][]**: An array of array of commands. If no commands are specified, the default will be used. Commands are explained in more details below.\n- **onChange: (value: MdeState) => void**: Event handler for the `onChange` event.\n- **generateMarkdownPreview: (markdown: string) => Promise<string>;**: Function that should return the generated HTML for the preview.\n- **layout?: string**: The name of the layout to be used. For now, the only supported layout is the default: `vertical`.\n\n## Styling\n\nThe following styles from React-mde should be added: (Both .scss and .css files are available. No need to use sass-loader if you don't want)\n\nEasiest way: import `react-mde-all.css`:\n\n    import 'react-mde/lib/styles/css/react-mde-all.css';\n    \nIf you want to have a more granular control over the styles, you can import each individual file.\n    \nIf you're using SASS, you can override these variables: https://github.com/andrerpena/react-mde/blob/master/src/styles/variables.scss\n\nYou also need Font Awesome for the toolbar icons. Font Awesome 5 [can be installed in different ways](https://fontawesome.com/how-to-use/svg-with-js),\nbut the easiest is just adding this to the `<head/>`:\n\n    <script defer src=\"https://use.fontawesome.com/releases/v5.0.6/js/all.js\"></script>\n\n## XSS concerns\n\nReact-mde does not automatically sanitize the HTML preview. If your using Showdown,\nthis has been taken from [their documentation](https://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it)):\n    \n> Cross-side scripting is a well known technique to gain access to private information of the users\nof a website. The attacker injects spurious HTML content (a script) on the web page which will read \nthe user’s cookies and do something bad with it (like steal credentials). As a countermeasure,\n you should filter any suspicious content coming from user input. Showdown doesn’t include an \n XSS filter, so you must provide your own. But be careful in how you do it…\n \nYou might want to take a look at [showdown-xss-filter](https://github.com/VisionistInc/showdown-xss-filter).\n\n    \n## Commands\n\nReact-mde allows you to use the build-in commands, implement your own commands, or both.\n\n## Composition and custom layouts\n\nReact-mde is designed to be composable and to facilitate new layouts\n\n![architecture](https://github.com/andrerpena/react-mde/blob/master/assets/architecture.png)\n\n## Change log / Migrating from older versions\n\n[Instructions here](https://github.com/andrerpena/react-mde/blob/master/docs-md/ChangeLogMigrating.md).\n\n## Roadmap\n\nCheck the project here: https://github.com/andrerpena/react-mde/projects/1\n\n## Licence\n\nReact-mde is MIT licensed\n\n## About the author\n\nMade with :heart: by André Pena. Check out my website: http://andrerpena.me\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andrerpena/react-mde.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production gulp build",
    "build:demo": "cross-env NODE_ENV=production gulp build-demo",
    "build:lib": "cross-env NODE_ENV=production gulp build-lib",
    "build:ts": "tsc --project ./tsconfig.build.json",
    "start": "cross-env NODE_ENV=development ts-node ./demo/server.ts",
    "test": "mocha --timeout 15000 -r ts-node/register ./test/*Spec.ts",
    "tsc": "tsc",
    "tslint": "tslint --project \".\"",
    "tslint:fix": "tslint --project \".\" --fix",
    "webpack": "webpack --config webpack.config.demo.dev.js",
    "webpack-prod": "webpack --config webpack.config.demo.prod.js"
  },
  "types": "./lib/definitions/index.d.ts",
  "version": "5.1.1"
}
