{
  "_args": [
    [
      {
        "raw": "react-tiny-virtual-list@^2.0.0",
        "scope": null,
        "escapedName": "react-tiny-virtual-list",
        "name": "react-tiny-virtual-list",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/christopherfennessey/Documents/School/oneApp/node_modules/react-infinite-calendar"
    ]
  ],
  "_from": "react-tiny-virtual-list@>=2.0.0 <3.0.0",
  "_id": "react-tiny-virtual-list@2.1.4",
  "_inCache": true,
  "_location": "/react-tiny-virtual-list",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-tiny-virtual-list-2.1.4.tgz_1508850853850_0.017225906485691667"
  },
  "_npmUser": {
    "name": "clauderic",
    "email": "clauderic.d@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-tiny-virtual-list@^2.0.0",
    "scope": null,
    "escapedName": "react-tiny-virtual-list",
    "name": "react-tiny-virtual-list",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-infinite-calendar"
  ],
  "_resolved": "https://registry.npmjs.org/react-tiny-virtual-list/-/react-tiny-virtual-list-2.1.4.tgz",
  "_shasum": "a574c4dfd8ccf462e3a335f665cffbfd08ce6e7d",
  "_shrinkwrap": null,
  "_spec": "react-tiny-virtual-list@^2.0.0",
  "_where": "/Users/christopherfennessey/Documents/School/oneApp/node_modules/react-infinite-calendar",
  "author": {
    "name": "Clauderic Demers",
    "email": "me@ced.io"
  },
  "bugs": {
    "url": "https://github.com/clauderic/react-tiny-virtual-list/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.7"
  },
  "description": "A tiny but mighty list virtualization component, with zero dependencies 💪",
  "devDependencies": {
    "@types/jest": "^20.0.8",
    "@types/prop-types": "^15.5.1",
    "@types/react": "^15.0.38",
    "@types/react-dom": "^15.5.4",
    "awesome-typescript-loader": "^3.2.1",
    "babel-cli": "^6.26.0",
    "babel-eslint": "7.0.0",
    "babel-jest": "^19.0.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.23.0",
    "babel-preset-typescript": "^7.0.0-alpha.19",
    "codecov": "^1.0.1",
    "eslint": "3.8.1",
    "eslint-config-react-app": "^0.5.2",
    "eslint-plugin-flowtype": "2.21.0",
    "eslint-plugin-import": "2.0.1",
    "eslint-plugin-jsx-a11y": "2.2.3",
    "eslint-plugin-react": "6.4.1",
    "fs-extra": "^4.0.1",
    "jest": "^19.0.2",
    "nwb": "0.15.x",
    "react": "^15.4.2",
    "react-addons-test-utils": "^15.4.2",
    "react-dom": "^15.4.2",
    "react-test-renderer": "^15.4.2",
    "rimraf": "^2.6.1",
    "rollup": "^0.49.2",
    "rollup-plugin-babel": "^3.0.2",
    "rollup-plugin-commonjs": "^8.2.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-uglify": "^2.0.1",
    "tslint": "^5.7.0",
    "tslint-config-shopify": "^3.0.0",
    "typescript": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9JvkWliho5SGHlv/uz3MuObUkg60SPvw3Ottvi/n4nl7qzBvxtb9oI8kJqI9sfZYYGy7xQLbTP0vGhqtnhA04Q==",
    "shasum": "a574c4dfd8ccf462e3a335f665cffbfd08ce6e7d",
    "tarball": "https://registry.npmjs.org/react-tiny-virtual-list/-/react-tiny-virtual-list-2.1.4.tgz"
  },
  "files": [
    "build",
    "types"
  ],
  "gitHead": "e97d4321156018f28f122ab356895a66eabb3024",
  "homepage": "https://github.com/clauderic/react-tiny-virtual-list",
  "jsnext:main": "build/react-tiny-virtual-list.es.js",
  "keywords": [
    "react",
    "reactjs",
    "react-component",
    "virtual",
    "list",
    "scrolling",
    "infinite",
    "virtualized",
    "virtualization",
    "windowing"
  ],
  "license": "MIT",
  "main": "build/react-tiny-virtual-list.cjs.js",
  "maintainers": [
    {
      "name": "clauderic",
      "email": "clauderic.d@gmail.com"
    }
  ],
  "module": "build/react-tiny-virtual-list.es.js",
  "name": "react-tiny-virtual-list",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "15.x || 16.x"
  },
  "readme": "<div align=\"center\" style=\"margin-bottom: 30px;\">\n<img src=\"https://cloud.githubusercontent.com/assets/1416436/23387281/9a628ec4-fd29-11e6-9a1a-09f755c21a14.png\" width=\"224\"/>\n</div>\n\n# react-tiny-virtual-list\n> A tiny but mighty list virtualization library, with zero dependencies 💪\n\n[![npm version](https://img.shields.io/npm/v/react-tiny-virtual-list.svg)](https://www.npmjs.com/package/react-tiny-virtual-list)\n[![npm downloads](https://img.shields.io/npm/dm/react-tiny-virtual-list.svg)](https://www.npmjs.com/package/react-tiny-virtual-list)\n[![Build Status](https://travis-ci.org/clauderic/react-tiny-virtual-list.svg?branch=master)](https://travis-ci.org/clauderic/react-tiny-virtual-list)\n[![codecov](https://codecov.io/gh/clauderic/react-tiny-virtual-list/branch/master/graph/badge.svg)](https://codecov.io/gh/clauderic/react-tiny-virtual-list)\n![typescript](https://img.shields.io/badge/%3C%2F%3E-TypeScript-blue.svg)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/clauderic/react-tiny-virtual-list/blob/master/LICENSE)\n[![Gitter](https://badges.gitter.im/clauderic/react-tiny-virtual-list.svg)](https://gitter.im/clauderic/react-tiny-virtual-list)\n\n<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/oN9PDWZz8fQcbh9sxpDEUvD5/clauderic/react-tiny-virtual-list'>  <img alt='Sponsor' width='888' height='68' src='https://app.codesponsor.io/embed/oN9PDWZz8fQcbh9sxpDEUvD5/clauderic/react-tiny-virtual-list.svg' /></a>\n\n* **Tiny & dependency free** – Only 3kb gzipped\n* **Render millions of items**, without breaking a sweat\n* **Scroll to index** or **set the initial scroll offset**\n* **Supports fixed** or **variable** heights/widths\n* **Vertical** or **Horizontal** lists\n\nCheck out the [demo](https://clauderic.github.io/react-tiny-virtual-list/) for some examples.\n\nGetting Started\n---------------\n\nUsing [npm](https://www.npmjs.com/):\n```\nnpm install react-tiny-virtual-list --save\n```\n\nES6, CommonJS, and UMD builds are available with each distribution. For example:\n```js\nimport VirtualList from 'react-tiny-virtual-list';\n```\n\nYou can also use a global-friendly UMD build:\n```html\n<script src=\"react-tiny-virtual-list/umd/react-tiny-virtual-list.js\"></script>\n<script>\nvar VirtualList = window.VirtualList;\n...\n</script>\n```\n\nExample usage\n-------------\n\n```js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport VirtualList from 'react-tiny-virtual-list';\n\nconst data = ['A', 'B', 'C', 'D', 'E', 'F', ...];\n\nrender(\n  <VirtualList\n    width='100%'\n    height={600}\n    itemCount={data.length}\n    itemSize={50} // Also supports variable heights (array or function getter)\n    renderItem={({index, style}) =>\n      <div key={index} style={style}> // The style property contains the item's absolute position\n        Letter: {data[index]}, Row: #{index}\n      </div>\n    }\n  />,\n  document.getElementById('root')\n);\n```\n\n### Prop Types\n| Property          | Type              | Required? | Description                                                                                                                                                                                                                                                                                                                                                                                                                          |\n|:------------------|:------------------|:----------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| width             | Number or String* | ✓         | Width of List. This property will determine the number of rendered items when scrollDirection is `'horizontal'`.                                                                                                                                                                                                                                                                                                                     |\n| height            | Number or String* | ✓         | Height of List. This property will determine the number of rendered items when scrollDirection is `'vertical'`.                                                                                                                                                                                                                                                                                                                      |\n| itemCount         | Number            | ✓         | The number of items you want to render                                                                                                                                                                                                                                                                                                                                                                                               |\n| renderItem        | Function          | ✓         | Responsible for rendering an item given it's index: `({index: number, style: Object}): React.PropTypes.node`. The returned element must handle key and style.                                                                                                                                                                                                                                                                        |\n| itemSize          |                   | ✓         | Either a fixed height/width (depending on the scrollDirection), an array containing the heights of all the items in your list, or a function that returns the height of an item given its index: `(index: number): number`                                                                                                                                                                                                           |\n| scrollDirection   | String            |           | Whether the list should scroll vertically or horizontally. One of `'vertical'` (default) or `'horizontal'`.                                                                                                                                                                                                                                                                                                                          |\n| scrollOffset      | Number            |           | Can be used to control the scroll offset; Also useful for setting an initial scroll offset                                                                                                                                                                                                                                                                                                                                           |\n| scrollToIndex     | Number            |           | Item index to scroll to (by forcefully scrolling if necessary)                                                                                                                                                                                                                                                                                                                                                                       |\n| scrollToAlignment | String            |           | Used in combination with `scrollToIndex`, this prop controls the alignment of the scrolled to item. One of: `'start'`, `'center'`, `'end'` or `'auto'`. Use `'start'` to always align items to the top of the container and `'end'` to align them bottom. Use `'center`' to align them in the middle of the container. `'auto'` scrolls the least amount possible to ensure that the specified `scrollToIndex` item is fully visible. |\n| overscanCount     | Number            |           | Number of extra buffer items to render above/below the visible items. Tweaking this can help reduce scroll flickering on certain browsers/devices.                                                                                                                                                                                                                                                                                   |\n| estimatedItemSize | Number            |           | Used to estimate the total size of the list before all of its items have actually been measured. The estimated total height is progressively adjusted as items are rendered.                                                                                                                                                                                                                                                         |\n| onItemsRendered    | Function          |           | Callback invoked with information about the slice of rows/columns that were just rendered. It has the following signature: `({startIndex: number, stopIndex: number})`.                                                                                                                                                                                                                                                                      |\n| onScroll          | Function          |           | Callback invoked whenever the scroll offset changes within the inner scrollable region. It has the following signature: `(scrollTop: number, event: React.UIEvent<HTMLDivElement>)`.                                                                                                                                                                                                                                                 |\n\n*\\* Width may only be a string when `scrollDirection` is `'vertical'`. Similarly, Height may only be a string if `scrollDirection` is `'horizontal'`*\n\n### Public Methods\n\n#### recomputeSizes (index: number)\nThis method force recomputes the item sizes after the specified index (these are normally cached).\n\n`VirtualList` has no way of knowing when its underlying data has changed, since it only receives a itemSize property. If the itemSize is a `number`, this isn't an issue, as it can compare before and after values and automatically call `recomputeSizes` internally.\n However, if you're passing a function to `itemSize`, that type of comparison is error prone. In that event, you'll need to call `recomputeSizes` manually to inform the `VirtualList` that the size of its items has changed.\n\n## Reporting Issues\nFound an issue? Please [report it](https://github.com/clauderic/react-tiny-virtual-list/issues) along with any relevant details to reproduce it.\n\n## Contributions\nFeature requests / pull requests are welcome, though please take a moment to make sure your contributions fits within the scope of the project. [Learn how to contribute](https://github.com/clauderic/react-tiny-virtual-list/blob/master/CONTRIBUTING.md)\n\n## Acknowledgments\nThis library draws inspiration from [react-virtualized](https://github.com/bvaughn/react-virtualized), and is meant as a bare-minimum replacement for the [List](https://github.com/bvaughn/react-virtualized/blob/master/docs/List.md) component. If you're looking for a tiny, lightweight and dependency-free list virtualization library that supports variable heights, you're in the right place! If you're looking for something that supports more use-cases, I highly encourage you to check out [react-virtualized](https://github.com/bvaughn/react-virtualized) instead, it's a fantastic library ❤️\n\n## License\nreact-tiny-virtual-list is available under the MIT License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/clauderic/react-tiny-virtual-list.git"
  },
  "scripts": {
    "build": "babel-node --presets es2015 ./config/build.js",
    "lint": "tslint './src/**/*.{ts,tsx}' --project tsconfig.json",
    "start": "nwb serve-react-app demo/src/index.tsx --config ./config/nwb/config.js",
    "test": "jest --config ./config/jest/config.json --no-cache",
    "test:ci": "npm run lint && npm run test && codecov",
    "test:coverage": "npm run test -- --coverage",
    "test:watch": "npm run test -- --watch"
  },
  "types": "types/index.d.ts",
  "user": "clauderic",
  "version": "2.1.4"
}
